<template>
    <div id="calendar" ref="calendarEl"></div>
</template>

<script setup>
import { ref, onMounted, watch, nextTick } from 'vue'
import { Calendar } from '@fullcalendar/core'
import dayGridPlugin from '@fullcalendar/daygrid'
import timeGridPlugin from '@fullcalendar/timegrid'
import interactionPlugin from '@fullcalendar/interaction'
import axios from 'axios'

const props = defineProps({
    appointments: {
        type: Array,
        default: () => []
    },
    userPermissions: {
        type: Object,
        default: () => ({})
    },
    filteredSpecialtyId: {
        type: [String, Number],
        default: null
    },
    availableDays: {
        type: Array,
        default: () => []
    }
})

const emit = defineEmits(['event-click', 'date-click'])

const calendarEl = ref(null)
let calendar = null

// Funci√≥n para verificar si una fecha est√° disponible
const isDateAvailable = (dateInfo) => {
    if (!props.filteredSpecialtyId || props.availableDays.length === 0) {
        return true // Si no hay especialidad filtrada, permitir todas las fechas
    }
    
    const date = new Date(dateInfo.date || dateInfo.dateStr || dateInfo)
    const dayOfWeek = date.getDay() // 0 = domingo, 1 = lunes, etc.
    const dayNames = ['Domingo', 'Lunes', 'Martes', 'Mi√©rcoles', 'Jueves', 'Viernes', 'S√°bado']
    const isAvailable = props.availableDays.includes(dayOfWeek)
    
    console.log(`üìÖ Verificando fecha: ${date.toDateString()} (${dayNames[dayOfWeek]} = ${dayOfWeek})`)
    console.log(`   - D√≠as disponibles en n√∫meros: [${props.availableDays.join(', ')}]`)
    console.log(`   - D√≠as disponibles en nombres: [${props.availableDays.map(d => dayNames[d]).join(', ')}]`)
    console.log(`   - ¬ø${dayNames[dayOfWeek]} est√° disponible?: ${isAvailable}`)
    
    return isAvailable
}

// Funci√≥n para actualizar todos los estilos de celdas de d√≠a
const updateAllDayCells = () => {
    if (!calendar) {
        console.log('‚ùå updateAllDayCells: Calendar no disponible')
        return
    }
    
    // Obtener todas las celdas de d√≠a del calendario
    const dayCells = calendar.el.querySelectorAll('.fc-daygrid-day')
    console.log(`üîÑ updateAllDayCells: Encontradas ${dayCells.length} celdas`)
    console.log(`   - Especialidad filtrada: ${props.filteredSpecialtyId}`)
    console.log(`   - D√≠as disponibles: [${props.availableDays.join(', ')}]`)
    
    dayCells.forEach((cell, index) => {
        const dateStr = cell.getAttribute('data-date')
        if (dateStr) {
            const dateInfo = { dateStr }
            const date = new Date(dateStr)
            const dayOfWeek = date.getDay()
            
            // Remover clases y estilos existentes
            cell.classList.remove('fc-day-disabled')
            cell.title = ''
            cell.style.background = ''
            cell.style.opacity = ''
            cell.style.cursor = ''
            cell.style.pointerEvents = ''
            
            // Aplicar nuevos estilos seg√∫n el estado actual
            if (props.filteredSpecialtyId) {
                if (props.availableDays.length === 0) {
                    // Si no hay d√≠as disponibles para la especialidad, bloquear todo
                    cell.classList.add('fc-day-disabled')
                    cell.title = 'Esta especialidad no tiene horarios de atenci√≥n configurados'
                    // Estilos inline AGRESIVOS como respaldo
                    cell.style.setProperty('background', 'repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #e5e7eb 10px, #e5e7eb 20px)', 'important')
                    cell.style.setProperty('opacity', '0.6', 'important')
                    cell.style.setProperty('cursor', 'not-allowed', 'important')
                    cell.style.setProperty('pointer-events', 'none', 'important')
                    
                    // Tambi√©n aplicar a elementos hijos
                    const dayFrame = cell.querySelector('.fc-daygrid-day-frame')
                    if (dayFrame) {
                        dayFrame.style.setProperty('background', 'repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #e5e7eb 10px, #e5e7eb 20px)', 'important')
                        dayFrame.style.setProperty('opacity', '0.6', 'important')
                    }
                    
                    console.log(`   üìÖ Celda ${index} (${dateStr}, d√≠a ${dayOfWeek}): BLOQUEADA (sin d√≠as disponibles) - ESTILOS APLICADOS`)
                } else if (!isDateAvailable(dateInfo)) {
                    // Si hay algunos d√≠as disponibles pero este no est√° incluido
                    cell.classList.add('fc-day-disabled')
                    cell.title = 'Esta especialidad no atiende este d√≠a'
                    // Estilos inline AGRESIVOS como respaldo
                    cell.style.setProperty('background', 'repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #e5e7eb 10px, #e5e7eb 20px)', 'important')
                    cell.style.setProperty('opacity', '0.6', 'important')
                    cell.style.setProperty('cursor', 'not-allowed', 'important')
                    cell.style.setProperty('pointer-events', 'none', 'important')
                    
                    // Tambi√©n aplicar a elementos hijos
                    const dayFrame = cell.querySelector('.fc-daygrid-day-frame')
                    if (dayFrame) {
                        dayFrame.style.setProperty('background', 'repeating-linear-gradient(45deg, #f3f4f6, #f3f4f6 10px, #e5e7eb 10px, #e5e7eb 20px)', 'important')
                        dayFrame.style.setProperty('opacity', '0.6', 'important')
                    }
                    
                    console.log(`   üìÖ Celda ${index} (${dateStr}, d√≠a ${dayOfWeek}): BLOQUEADA (d√≠a no disponible) - ESTILOS APLICADOS`)
                } else {
                    console.log(`   üìÖ Celda ${index} (${dateStr}, d√≠a ${dayOfWeek}): DISPONIBLE`)
                }
            } else {
                console.log(`   üìÖ Celda ${index} (${dateStr}, d√≠a ${dayOfWeek}): DISPONIBLE (sin filtro)`)
            }
        }
    })
}

// Funci√≥n para actualizar las opciones de fecha del calendario
const updateCalendarDateOptions = () => {
    if (calendar) {
        // Actualizar selectAllow
        calendar.setOption('selectAllow', (info) => {
            // Si hay filtro de especialidad pero no hay d√≠as disponibles, bloquear todo
            if (props.filteredSpecialtyId && props.availableDays.length === 0) {
                return false
            }
            // Si hay filtro de especialidad, usar la validaci√≥n de d√≠as disponibles
            if (props.filteredSpecialtyId) {
                return isDateAvailable(info)
            }
            // Sin filtro de especialidad, permitir todas las fechas
            return true
        })
        
        // Actualizar dateClick
        calendar.setOption('dateClick', (info) => {
            // Solo permitir clicks en fechas disponibles
            if (props.filteredSpecialtyId && props.availableDays.length === 0) {
                return false
            }
            if (props.filteredSpecialtyId && !isDateAvailable(info)) {
                return false
            }
            
            // Verificar permisos antes de permitir click en fechas para crear citas
            if (!props.userPermissions?.can_create_appointments) {
                return false
            }
            
            emit('date-click', info.dateStr)
        })
        
        // Actualizar dayCellDidMount para reflejar los cambios actuales
        calendar.setOption('dayCellDidMount', (info) => {
            // Personalizar d√≠as no disponibles
            if (props.filteredSpecialtyId) {
                if (props.availableDays.length === 0) {
                    // Si no hay d√≠as disponibles para la especialidad, bloquear todo
                    info.el.classList.add('fc-day-disabled')
                    info.el.title = 'Esta especialidad no tiene horarios de atenci√≥n configurados'
                } else if (!isDateAvailable(info)) {
                    // Si hay algunos d√≠as disponibles pero este no est√° incluido
                    info.el.classList.add('fc-day-disabled')
                    info.el.title = 'Esta especialidad no atiende este d√≠a'
                } else {
                    // D√≠a disponible
                    info.el.classList.remove('fc-day-disabled')
                    info.el.title = ''
                }
            } else {
                // Sin filtro de especialidad, restaurar estilos por defecto
                info.el.classList.remove('fc-day-disabled')
                info.el.title = ''
            }
        })
    }
}

const initCalendar = () => {
    if (calendarEl.value && !calendar) {
        calendar = new Calendar(calendarEl.value, {
            plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],
            initialView: 'dayGridMonth',
            locale: 'es',
            firstDay: 1, // Forzar que la semana empiece en Lunes (1)
            headerToolbar: {
                left: 'prev,next today',
                center: 'title',
                right: 'dayGridMonth,timeGridWeek,timeGridDay'
            },
            height: 'auto',
            events: props.appointments,
            eventClick: (info) => {
                // Verificar permisos antes de permitir click en eventos
                const appointment = info.event.extendedProps.appointment || info.event.extendedProps
                
                if (props.userPermissions?.is_patient) {
                    // Los pacientes pueden hacer clic si pueden editar la cita (m√°s de 24 horas)
                    if (canPatientEditAppointment(appointment)) {
                        emit('event-click', appointment)
                    }
                    return
                }
                
                if (!props.userPermissions?.can_edit_appointments) {
                    return
                }
                
                emit('event-click', appointment)
            },
            dateClick: (info) => {
                // Solo permitir clicks en fechas disponibles
                if (!isDateAvailable(info)) {
                    return false
                }
                
                // Verificar permisos antes de permitir click en fechas para crear citas
                if (!props.userPermissions?.can_create_appointments) {
                    return false
                }
                
                emit('date-click', info.dateStr)
            },
            eventDidMount: (info) => {
                // Personalizar la apariencia del evento
                const status = info.event.extendedProps.status
                const element = info.el
                
                // Aplicar clases CSS seg√∫n el estado
                element.classList.add('cursor-pointer')
                
                switch (status) {
                    case 'programada':
                        element.style.backgroundColor = '#fbbf24'
                        element.style.borderColor = '#f59e0b'
                        break
                    case 'confirmada':
                        element.style.backgroundColor = '#3b82f6'
                        element.style.borderColor = '#2563eb'
                        break
                    case 'en_curso':
                        element.style.backgroundColor = '#f97316'
                        element.style.borderColor = '#ea580c'
                        break
                    case 'completada':
                        element.style.backgroundColor = '#10b981'
                        element.style.borderColor = '#059669'
                        break
                    case 'cancelada':
                        element.style.backgroundColor = '#ef4444'
                        element.style.borderColor = '#dc2626'
                        break
                    case 'no_asistio':
                        element.style.backgroundColor = '#6b7280'
                        element.style.borderColor = '#4b5563'
                        break
                    default:
                        element.style.backgroundColor = '#9ca3af'
                        element.style.borderColor = '#6b7280'
                }
                
                // Agregar tooltip
                element.title = `${info.event.title}\nEstado: ${getStatusText(status)}\nDoctor: ${info.event.extendedProps.doctor}\nPaciente: ${info.event.extendedProps.patient}`
            },
            businessHours: {
                daysOfWeek: [1, 2, 3, 4, 5], // Lunes a viernes
                startTime: '08:00',
                endTime: '18:00',
            },
            slotMinTime: '07:00:00',
            slotMaxTime: '20:00:00',
            nowIndicator: true,
            selectable: true,
            selectMirror: true,
            selectAllow: (info) => {
                // Si hay filtro de especialidad pero no hay d√≠as disponibles, bloquear todo
                if (props.filteredSpecialtyId && props.availableDays.length === 0) {
                    return false
                }
                // Si hay filtro de especialidad, usar la validaci√≥n de d√≠as disponibles
                if (props.filteredSpecialtyId) {
                    return isDateAvailable(info)
                }
                // Sin filtro de especialidad, permitir todas las fechas
                return true
            },
            dayMaxEvents: true,
            weekends: true,
            dayCellDidMount: (info) => {
                // Personalizar d√≠as no disponibles
                if (props.filteredSpecialtyId) {
                    if (props.availableDays.length === 0) {
                        // Si no hay d√≠as disponibles para la especialidad, bloquear todo
                        info.el.classList.add('fc-day-disabled')
                        info.el.title = 'Esta especialidad no tiene horarios de atenci√≥n configurados'
                    } else if (!isDateAvailable(info)) {
                        // Si hay algunos d√≠as disponibles pero este no est√° incluido
                        info.el.classList.add('fc-day-disabled')
                        info.el.title = 'Esta especialidad no atiende este d√≠a'
                    } else {
                        // D√≠a disponible
                        info.el.classList.remove('fc-day-disabled')
                        info.el.title = ''
                    }
                } else {
                    // Sin filtro de especialidad, restaurar estilos por defecto
                    info.el.classList.remove('fc-day-disabled')
                    info.el.title = ''
                }
            },
            buttonText: {
                today: 'Hoy',
                month: 'Mes',
                week: 'Semana',
                day: 'D√≠a',
                prev: 'Anterior',
                next: 'Siguiente'
            }
        })
        
        calendar.render()
        
        // Configurar observer para estilos persistentes
        setTimeout(() => {
            setupStyleObserver()
        }, 100)
    }
}

const getStatusText = (status) => {
    const texts = {
        'programada': 'Programada',
        'confirmada': 'Confirmada',
        'en_curso': 'En Curso',
        'completada': 'Completada',
        'cancelada': 'Cancelada',
        'no_asistio': 'No Asisti√≥',
    }
    return texts[status] || status
}

// Funci√≥n para verificar si un paciente puede editar una cita
const canPatientEditAppointment = (appointment) => {
    if (!props.userPermissions?.is_patient) {
        return false
    }
    
    if (appointment.status === 'cancelada' || appointment.status === 'completada') {
        return false
    }
    
    const appointmentDate = new Date(appointment.appointment_date)
    const now = new Date()
    const hoursUntilAppointment = (appointmentDate - now) / (1000 * 60 * 60)
    
    return hoursUntilAppointment >= 24
}

// Actualizar eventos cuando cambien las props
watch(() => props.appointments, (newAppointments) => {
    if (calendar) {
        calendar.removeAllEvents()
        calendar.addEventSource(newAppointments)
    }
}, { deep: true })

// Watcher para especialidad filtrada y d√≠as disponibles
watch([() => props.filteredSpecialtyId, () => props.availableDays], async () => {
    console.log('üîç AppointmentCalendar - Datos recibidos:')
    console.log('  - Especialidad filtrada:', props.filteredSpecialtyId)
    console.log('  - D√≠as disponibles:', props.availableDays)
    console.log('  - Tipo de availableDays:', typeof props.availableDays)
    console.log('  - Es array?:', Array.isArray(props.availableDays))
    
    updateCalendarDateOptions()
    
    // Forzar re-render de las celdas de d√≠a
    if (calendar) {
        console.log('üîÑ Forzando re-render del calendario...')
        calendar.render()
        
        // Esperar m√∫ltiples ciclos de nextTick para asegurar que el DOM se actualice
        await nextTick()
        await new Promise(resolve => setTimeout(resolve, 100))
        
        console.log('üé® Actualizando estilos de celdas...')
        updateAllDayCells()
        
        // Segundo intento despu√©s de un delay adicional
        setTimeout(() => {
            console.log('üé® Segundo intento de actualizaci√≥n de celdas...')
            updateAllDayCells()
            
            // Tercer intento con aplicaci√≥n forzada de estilos
            setTimeout(() => {
                console.log('üé® Tercer intento - Aplicaci√≥n forzada de estilos...')
                forceApplyStyles()
            }, 300)
        }, 200)
    }
}, { deep: true })

onMounted(() => {
    nextTick(() => {
        initCalendar()
    })
})
</script>

<style scoped>
/* Estilos para FullCalendar */
:deep(.fc) {
    font-family: 'Inter', sans-serif;
}

:deep(.fc-button) {
    background-color: #3b82f6;
    border-color: #3b82f6;
}

:deep(.fc-button:hover) {
    background-color: #2563eb;
    border-color: #2563eb;
}

:deep(.fc-button:disabled) {
    background-color: #9ca3af;
    border-color: #9ca3af;
}

/* Estilos para d√≠as bloqueados - Mayor especificidad */
:deep(.fc .fc-daygrid-day.fc-day-disabled),
:deep(.fc-daygrid-day.fc-day-disabled),
:deep(.fc-day-disabled) {
    background-color: #f3f4f6 !important;
    opacity: 0.5 !important;
    cursor: not-allowed !important;
    pointer-events: none !important;
}

:deep(.fc .fc-daygrid-day.fc-day-disabled:hover),
:deep(.fc-daygrid-day.fc-day-disabled:hover),
:deep(.fc-day-disabled:hover) {
    background-color: #e5e7eb !important;
}

/* Estilo para d√≠as no disponibles por especialidad - Mayor especificidad */
:deep(.fc .fc-daygrid-day.fc-day-disabled),
:deep(.fc-daygrid-day.fc-day-disabled) {
    background: repeating-linear-gradient(
        45deg,
        #f3f4f6,
        #f3f4f6 10px,
        #e5e7eb 10px,
        #e5e7eb 20px
    ) !important;
    opacity: 0.6 !important;
}

/* Estilos adicionales para asegurar que se vean */
:deep(.fc .fc-daygrid-day.fc-day-disabled .fc-daygrid-day-frame),
:deep(.fc-daygrid-day.fc-day-disabled .fc-daygrid-day-frame) {
    background: repeating-linear-gradient(
        45deg,
        #f3f4f6,
        #f3f4f6 10px,
        #e5e7eb 10px,
        #e5e7eb 20px
    ) !important;
    opacity: 0.6 !important;
}

:deep(.fc .fc-daygrid-day.fc-day-disabled .fc-daygrid-day-top),
:deep(.fc-daygrid-day.fc-day-disabled .fc-daygrid-day-top) {
    opacity: 0.5 !important;
}

:deep(.fc-today-button) {
    background-color: #10b981;
    border-color: #10b981;
}

:deep(.fc-today-button:hover) {
    background-color: #059669;
    border-color: #059669;
}

:deep(.fc-daygrid-day-top) {
    justify-content: center;
}

:deep(.fc-event) {
    cursor: pointer;
    border-radius: 4px;
    font-size: 12px;
    padding: 2px 4px;
}

:deep(.fc-event:hover) {
    opacity: 0.8;
}

:deep(.fc-day-today) {
    background-color: rgba(59, 130, 246, 0.1) !important;
}

:deep(.fc-timegrid-slot) {
    height: 3em;
}

:deep(.fc-timegrid-event) {
    border-radius: 3px;
    padding: 1px 3px;
}

:deep(.fc-header-toolbar) {
    margin-bottom: 1.5em;
    padding: 0 0.5em;
}

:deep(.fc-toolbar-title) {
    font-size: 1.5em;
    font-weight: 600;
    color: #1f2937;
}

:deep(.fc-col-header-cell) {
    background-color: #f9fafb;
    border-color: #e5e7eb;
    font-weight: 600;
    color: #374151;
}

:deep(.fc-scrollgrid) {
    border-color: #e5e7eb;
}

:deep(.fc-scrollgrid td) {
    border-color: #e5e7eb;
}

:deep(.fc-daygrid-day-number) {
    color: #374151;
    font-weight: 500;
}

:deep(.fc-non-business) {
    background-color: #f3f4f6;
}
</style>
