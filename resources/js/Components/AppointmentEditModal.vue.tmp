<template>
  <div v-if="show" class="fixed inset-0 z-50 overflow-y-auto" role="dialog" aria-modal="true">
    <div class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0">
      <div class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity" aria-hidden="true" @click="$emit('close')"></div>
      <span class="hidden sm:inline-block sm:align-middle sm:h-screen" aria-hidden="true">&#8203;</span>

      <div class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-md sm:w-full">
        <form @submit.prevent="submit">
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <h3 class="text-lg font-medium text-gray-900 mb-4">Editar Cita</h3>
            <div>
              <label class="block text-sm font-medium text-gray-700">Paciente</label>
              <input type="text" :value="patientDisplayName" disabled class="mt-1 block w-full rounded-md border-gray-300 bg-gray-100 text-gray-700 shadow-sm" />
            </div>
          </div>

          <div class="bg-gray-50 px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
            <button type="submit" :disabled="processing || form.processing" class="inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-blue-600 text-white">Actualizar</button>
            <button type="button" @click="$emit('close')" class="mt-3 ml-2 inline-flex justify-center rounded-md border border-gray-300 px-4 py-2 bg-white">Cancelar</button>
          </div>
        </form>
      </div>
    </div>
  </div>
</template>

<script setup>
import { ref, computed, watch } from 'vue'
import { useForm } from '@inertiajs/vue3'

const props = defineProps({ show: Boolean, appointment: Object, doctors: Array })
const emit = defineEmits(['close','saved'])

const processing = ref(false)
const form = useForm({ doctor_id: '', appointment_date: '', appointment_time: '', reason: '' })

const patientDisplayName = computed(() => props.appointment?.patient?.user?.name || props.appointment?.patient_name || '')

watch(() => props.show, (v) => {
  if (v && props.appointment) {
    const a = props.appointment
    const dt = a.appointment_date ? new Date(a.appointment_date) : (a.start ? new Date(a.start) : null)
    const date = dt && !isNaN(dt.getTime()) ? dt.toISOString().split('T')[0] : ''
    const time = dt && !isNaN(dt.getTime()) ? dt.toTimeString().slice(0,5) : ''
    form.reset()
    form.set({ doctor_id: a.doctor_id || a.doctor?.id || '', appointment_date: date, appointment_time: time, reason: a.reason || '' })
  }
})

const submit = () => {
  if (!props.appointment || !props.appointment.id) return
  processing.value = true
  const payload = { doctor_id: form.doctor_id, appointment_date: `${form.appointment_date} ${form.appointment_time || '00:00'}`, reason: form.reason }
  form.put(`/appointments/${props.appointment.id}`, { data: payload, onSuccess: () => { processing.value = false; emit('saved'); emit('close') }, onError: () => { processing.value = false } })
}
</script>

<style scoped>
/* vac√≠o */
</style>
